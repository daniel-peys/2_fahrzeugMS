' Copyright (C) 2019 - present Juergen Zimmermann, Hochschule Karlsruhe
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <https://www.gnu.org/licenses/>.
@startuml KundeHandler

skinparam classAttributeIconSize 0

package org.springframework {
    package web.bind.annotation {
        interface "@PathVariable" as PathVariable
        interface "@RequestParam" as RequestParam
        interface "@RequestBody" as RequestBody
    }

    package http {
        class ResponseEntity<T>
        package server.reactive {
            interface ServerHttpRequest
        }
    }
}

package kotlin.collections {
    interface List
}

package java.security as javaSecurity {
    interface Principle
}

package com.acme.kunde {
    package entity {
        class KundeId << typealias >>
    }

    package service {
        class KundeService << control >> << @Service >>
    }

    package security {
        class CustomUser
    }

    package rest #DDDDDD {
        package patch #FFFFFF {
            class PatchOperation <<entity>>
        }

        class KundeVO <<entity>>
        class KundeUserVO <<entity>>
        KundeUserVO o-> KundeVO
        KundeUserVO o-down-> CustomUser

        interface GenericBody
        class Text
        class Values
        ' Vererbung
        GenericBody <|-- Text
        ' Inner Class
        GenericBody +-- Text
        GenericBody <|-- Values
        GenericBody +-- Values

        class KundeWriteController << boundary >> << @RestController >> << @RequestMapping >> {
            + @PostMapping suspend create(@RequestBody kundeVO: KundeUserVO, request: ServerHttpRequest): ResponseEntity<GenericBody>
            + @PutMapping suspend update(@PathVariable id: KundeId, @RequestBody kundeVO: KundeVO, @RequestHeader("If-Match") version: String?): ResponseEntity<GenericBody>
            + @PatchMapping suspend patch(@PathVariable id: KundeId, @RequestBody patchOps: List<PatchOperation>, @RequestHeader("If-Match") version: String?, principal: Principal?): ResponseEntity<GenericBody>
            + @DeleteMapping suspend deleteById(@PathVariable id: KundeId): ResponseEntity<Unit>
        }

        KundeWriteController o-right-> "1" KundeService : service
        KundeWriteController ..> KundeUserVO
        KundeWriteController ..> KundeVO
        KundeWriteController ..> KundeId
        KundeWriteController ..> GenericBody
        KundeWriteController ..> PatchOperation

        KundeWriteController .up.> GenericBody
        KundeWriteController .up.> ServerHttpRequest
        KundeWriteController .up.> ResponseEntity

        KundeWriteController .up.> PathVariable
        KundeWriteController .up.> RequestParam
        KundeWriteController .up.> RequestBody

        KundeWriteController .up.> List
        KundeWriteController .up.> Principle

        GenericBody -[hidden]-> KundeVO
    }
}

hide empty members

footer (c) Juergen Zimmermann

@enduml
